<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $nums = ($var1 * $var2 * $var3 * $var4)
    $nums
}
 
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    #[string[,]$var = [string[,]]::New($cols,$rows)
    #$var.$arr
    #$var.$key


}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    $list = @()
    $num = read-host "enter positive integers one at time"
    while (($num = read-host "enter positive integers one at time") -gt 0){
        $list += $num
        $max = ($list | Measure-Object -Maximum).Maximum
        }
    $max   
}
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name #>     
       
       get-childitem -Path $path | sort-object -property Name

}
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
    $sum = 0
    $input | % { $sum += $_ }
    $sum    
}
function q7 {
	<# Return only those commands whose noun is process #>
    Get-Command | Where-Object Noun -eq process
}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument	#>
    "PowerShell is $adjective"  
}
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#> 

       if ($addr -match '^(?:(?:0?0?\d|0?[1-9]\d|1\d\d|2[0-5][0-5]|2[0-4]\d)\.){3}(?:0?0?\d|0?[1-9]\d|1\d\d|2[0-5][0-5]|2[0-4]\d)$'){
            return $true}
       else{ return $false
    }
             
}
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
      
       $hash = (Get-Content $filepath | Get-FileHash -Algorithm SHA256).hash
       foreach ($item in $hash){
            if ($item -ne $lasthash){
                return $true}
            else{
                return $false}
            }
}
