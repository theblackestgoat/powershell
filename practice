<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $nums = ($var1 * $var2 * $var3 * $var4)
    $nums
    <# return($var1*$var2*$var3*$var4) #>
}
 
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    foreach ($row in $arr){
        if ($row[0] -eq $key){
            return $row[9]}
        else{
        }
    }
    return "-1"
    <# using array, use a foreach loop
    foreach($row in $array){
        if($row[0] -eq $key){
            return $row[9]
        }
    }

    $array = @(
    #>
}



####################################################################################################



function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    $list = @()
    $num = read-host "enter positive integers one at time"
    while (($num = read-host "enter positive integers one at time") -gt 0){
        $list += $num
        $max = ($list | Measure-Object -Maximum).Maximum
        }
    $max 
    <#
    $vals = @()
    do {
        $val = read-host
        if ($val -ne -1) {
            $vals += $val
            }
        }until($val -eq -1)
        return $($vals | measure-object -maximum).maximum
    }


    or


    $input = read-host -prompt "enter a number not -1"
    $arrau = @()
    while (input -ne -1){
        $array += $input
        $input = read-host -prompt "enter a number not -1)
    }
    return ($array | measure-object -maximum | select-objet -expandproperty Maximum)
    #>  
}


####################################################################################################



function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>

#    Get-Content $filename | Select-String $whichline | Select-Object -Index 0 
#    $whichline #| Select-String $whichline 

    $text = (Get-Content $filename)
#        foreach ($line in $text){
#            if ($line -eq $whichline){
#                $line | Select-Object -Index $whichline}
#            else{
    $text[$whichline]    
#               }
#        }
}
    <#
    $whichline is probly a number that corresponds with 
    #get-content saves output as an array of lines, line by line
    $content = get-content $filename 
    return #content[$whichline]
    #>


####################################################################################################



function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name #>     
       
       get-childitem -Path $path | sort-object -property Name

}

   

####################################################################################################



function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
    $sum = 0
    $input | % { $sum += $_ }
    $sum    
}
    <#
    $sum = 0
    foreach($a in $input){
        $sum += $a
    }
    return $sum


    or


    Begin {
        $allvalues = @()
    }
    Process {
        $allvalues += $_
    }
    End {
        foreach ($i in $allvalues){
            $sum += $i
        }
    $sum
    }
    #>


####################################################################################################



function q7 {
	<# Return only those commands whose noun is process #>
    Get-Command | Where-Object Noun -eq process
}

    <#
    return get-command -noun process
    #>

####################################################################################################



function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument	#>
    "PowerShell is $adjective"  
}
    <#
    return "powershell is $adjective"
    or 
    'powershell is ' + $adjective
    #>


####################################################################################################



function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#> 

       if ($addr -match '^(?:(?:0?0?\d|0?[1-9]\d|1\d\d|2[0-5][0-5]|2[0-4]\d)\.){3}(?:0?0?\d|0?[1-9]\d|1\d\d|2[0-5][0-5]|2[0-4]\d)$'){
            return $true}
       else{ return $false
    }
             
}
    <#
    
    #>


####################################################################################################



function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
      
       $hash = (Get-Content $filepath | Get-FileHash -Algorithm SHA256).hash
       foreach ($item in $hash){
            if ($item -ne $lasthash){
                return $true}
            else{
                return $false}
            }
}
    <#
    
    #>


####################################################################################################



